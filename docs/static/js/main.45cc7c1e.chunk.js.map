{"version":3,"sources":["Components/AddCategory.js","helpers/getGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,KAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAKlB,SACI,uBACIO,KAAM,OACNC,MAAQT,EACRU,SAnBc,SAACP,GAEvBF,EAAeE,EAAEQ,OAAOF,a,+BCRnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACTC,EADS,iDACwCC,UAAUH,GADlD,+DAEII,MAAMF,GAFV,cAETG,EAFS,gBAGMA,EAAKC,OAHX,uBAGRC,EAHQ,EAGRA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAT1B,kBAaRM,GAbQ,4CAAH,sDCCPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGrC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,kCAAKA,EAAL,WCHCO,EAAU,SAAC,GAAoB,IAAjBnB,EAAgB,EAAhBA,SAEvB,ECJwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAE/BqB,KAAM,GACNa,SAAS,IAHb,mBAAOC,EAAP,KAAcC,EAAd,KAqBA,OAdAC,qBAAY,WAERxB,EAAQC,GACHwB,MAAM,SAAAC,GAEHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAKtB,CAACpB,IAEGqB,EDnB0BK,CAAc1B,GAAlCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAErB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAqDhB,EAArD,OAEEoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAHjB,IAKI,qBAAKA,UAAU,YAAf,SAGYH,EAAOJ,KAAK,SAAAC,GAER,OACI,cAAC,EAAD,eAEQA,GADGA,EAAIC,aEoBhCgB,EApCa,WAExB,MAAoCzC,mBAAS,CAAC,SAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAOA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAkBA,IAE/B,uBAEA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAYA,GADLA,Y,MClBnC6B,IAASC,OAEP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.45cc7c1e.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n\r\n    const [inputValue, setinputValue] = useState(\" \")\r\n\r\n    const handleInputChange = (e) => {\r\n\r\n        setinputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2 ){\r\n            setCategories( cats => [inputValue, ...cats] );\r\n            setinputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type= 'text'\r\n                value= {inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\nexport const getGifs = async( category ) =>{\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=dQIt62PcESxTMgJbD2nQ152qpDazU2XH`;\r\n        const resp = await fetch(url);\r\n        const {data} = await resp.json();\r\n\r\n        const gifs = data.map( img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images.downsized_medium.url\r\n            }\r\n        })\r\n\r\n        return(gifs);\r\n       \r\n\r\n    }\r\n\r\n\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n\r\n    \r\n    return (\r\n        <div className='card animate__animated animate__fadeIn' >\r\n            <img src={url} alt={title}></img>\r\n            <p> {title} </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n\r\n    const { data:images, loading } = useFetchGifs( category );    \r\n    {/* aqui renombrar en la desestructuración se pone : seguido del nuevo nombre  */}\r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate__fadeIn'> { category } </h3>\r\n            {/* loading ? <p>Loading</p> : null  , un if corto o operador ternario */} \r\n            { loading && <p className='animate__animated animate__flash'>Loading</p>} { /* en vez de utilizar lo comentado arriba utilizó esto*/}\r\n\r\n            <div className='card-grid'>\r\n                \r\n                    {\r\n                        images.map( img => {   {/* aquí se utiliza el nuevo nombre, se pudo utilizar data.map tambien sin renombrar arriba */}\r\n\r\n                            return (\r\n                                <GifGridItem \r\n                                    key = {img.id}\r\n                                    {...img }\r\n                                />\r\n                                \r\n                            );                           \r\n                            \r\n                        })\r\n                    }\r\n                \r\n            </div>\r\n        </> \r\n    )\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { getGifs}  from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n\r\n        data: [],\r\n        loading: true\r\n\r\n    });\r\n\r\n    useEffect ( () => {\r\n\r\n        getGifs(category)\r\n            .then( imgs => {\r\n            \r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            \r\n            })\r\n\r\n    }, [category])\r\n\r\n    return(state); // { data: [], loading: true}\r\n\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { useState } from 'react';\r\nimport { AddCategory } from './Components/AddCategory';\r\nimport { GifGrid } from './Components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['goku']);\r\n\r\n    //const handleAdd = () =>{\r\n    //    setCategories( [...categories, 'Light Yagami']);\r\n    //}\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories = { setCategories } /> \r\n\r\n            <hr />\r\n            \r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                        <GifGrid\r\n                            key = {category}\r\n                            category = {category} />\r\n                    ))\r\n                }\r\n            </ol>\r\n\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nGifExpertApp.propTypes = {\r\n\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n  \n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}